// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include 'src/builtins/builtins-typed-array-gen.h'

namespace typed_array {
  // Naming convention from elements.cc. We have a similar intent but implement
  // fastpaths using generics instead of using a class hierarchy for elements
  // kinds specific implementations.
  type Uint8Elements extends ElementsKind;
  type Int8Elements extends ElementsKind;
  type Uint16Elements extends ElementsKind;
  type Int16Elements extends ElementsKind;
  type Uint32Elements extends ElementsKind;
  type Int32Elements extends ElementsKind;
  type Float32Elements extends ElementsKind;
  type Float64Elements extends ElementsKind;
  type Uint8ClampedElements extends ElementsKind;
  type BigUint64Elements extends ElementsKind;
  type BigInt64Elements extends ElementsKind;

  @export
  struct TypedArrayElementsInfo {
    // Calculates the number of bytes required for specified number of elements.
    CalculateByteLength(length: uintptr): uintptr labels IfInvalid {
      // TODO(v8:4153): use kArrayBufferMaxByteLength instead of kSmiMaxValue
      // to allow creation of huge TypedArrays.
      const maxArrayLength = kSmiMaxValue >>> this.sizeLog2;
      if (length > maxArrayLength) goto IfInvalid;
      const byteLength = length << this.sizeLog2;
      return byteLength;
    }

    // Calculates the maximum number of elements supported by a specified number
    // of bytes.
    CalculateLength(byteLength: uintptr): uintptr labels IfInvalid {
      const length = byteLength >>> this.sizeLog2;
      // TODO(v8:4153): use kArrayBufferMaxByteLength instead of kSmiMaxValue
      // to allow creation of huge TypedArrays.
      if (length > kSmiMaxValue) goto IfInvalid;
      return length;
    }

    // Determines if `bytes` (byte offset or length) cannot be evenly divided by
    // element size.
    IsUnaligned(bytes: uintptr): bool {
      // Exploits the fact the element size is a power of 2. Determining whether
      // there is remainder (not aligned) can be achieved efficiently with bit
      // masking. Shift is safe as sizeLog2 can be 3 at most (see
      // ElementsKindToShiftSize).
      return (bytes & ((1 << this.sizeLog2) - 1)) != 0;
    }

    sizeLog2: uintptr;
    kind: ElementsKind;
  }
  extern runtime TypedArraySortFast(Context, JSAny): JSTypedArray;
  extern runtime TypedArrayCopyElements(Context, JSTypedArray, Object, Number):
      void;
  extern macro TypedArrayBuiltinsAssembler::ValidateTypedArray(
      Context, JSAny, constexpr string): JSTypedArray;

  extern macro TypedArrayBuiltinsAssembler::CallCMemcpy(
      RawPtr, RawPtr, uintptr): void;
  extern macro TypedArrayBuiltinsAssembler::CallCMemmove(
      RawPtr, RawPtr, uintptr): void;
  extern macro TypedArrayBuiltinsAssembler::CallCMemset(
      RawPtr, intptr, uintptr): void;
  extern macro TypedArrayBuiltinsAssembler::GetBuffer(
      implicit context: Context)(JSTypedArray): JSArrayBuffer;
  extern macro TypedArrayBuiltinsAssembler::GetTypedArrayElementsInfo(
      JSTypedArray): TypedArrayElementsInfo;
  extern macro TypedArrayBuiltinsAssembler::GetTypedArrayElementsInfo(Map):
      TypedArrayElementsInfo;
  extern macro TypedArrayBuiltinsAssembler::IsUint8ElementsKind(ElementsKind):
      bool;
  extern macro TypedArrayBuiltinsAssembler::IsBigInt64ElementsKind(
      ElementsKind): bool;
  extern macro LoadFixedTypedArrayElementAsTagged(
      RawPtr, uintptr, constexpr ElementsKind): Numeric;
  extern macro TypedArrayBuiltinsAssembler::StoreJSTypedArrayElementFromNumeric(
      Context, JSTypedArray, uintptr, Numeric, constexpr ElementsKind);
  extern macro TypedArrayBuiltinsAssembler::StoreJSTypedArrayElementFromTagged(
      Context, JSTypedArray, uintptr, JSAny,
      constexpr ElementsKind) labels IfDetached;

  type LoadNumericFn = builtin(Context, JSTypedArray, uintptr) => Numeric;
  type StoreNumericFn = builtin(Context, JSTypedArray, uintptr, Numeric) => Smi;
  type StoreJSAnyFn = builtin(Context, JSTypedArray, uintptr, JSAny) => Smi;

  // The result codes returned by StoreNumericFn and StoreJSAnyFn builtins.
  const kStoreSucceded: Smi = 0;
  const kStoreFailureArrayDetached: Smi = 1;

  struct TypedArrayAccessor {
    LoadNumeric(
        context: Context, array: JSTypedArray, index: uintptr): Numeric {
      const loadfn: LoadNumericFn = this.loadNumericFn;
      return loadfn(context, array, index);
    }

    StoreNumeric(
        context: Context, array: JSTypedArray, index: uintptr, value: Numeric) {
      const storefn: StoreNumericFn = this.storeNumericFn;
      const result = storefn(context, array, index, value);
      assert(result == kStoreSucceded);
    }

    StoreJSAny(
        context: Context, array: JSTypedArray, index: uintptr, value: JSAny)
        labels IfDetached {
      const storefn: StoreJSAnyFn = this.storeJSAnyFn;
      const result = storefn(context, array, index, value);
      if (result == kStoreFailureArrayDetached) {
        goto IfDetached;
      }
      assert(result == kStoreSucceded);
    }

    loadNumericFn: LoadNumericFn;
    storeNumericFn: StoreNumericFn;
    storeJSAnyFn: StoreJSAnyFn;
  }

  macro GetTypedArrayAccessor<T : type extends ElementsKind>():
      TypedArrayAccessor {
    const loadNumericFn = LoadTypedElement<T>;
    const storeNumericFn = StoreTypedElementNumeric<T>;
    const storeJSAnyFn = StoreTypedElementJSAny<T>;
    return TypedArrayAccessor{loadNumericFn, storeNumericFn, storeJSAnyFn};
  }

  macro GetTypedArrayAccessor(elementsKind: ElementsKind): TypedArrayAccessor {
    if (IsElementsKindGreaterThan(elementsKind, UINT32_ELEMENTS)) {
      if (elementsKind == INT32_ELEMENTS) {
        return GetTypedArrayAccessor<Int32Elements>();
      } else if (elementsKind == FLOAT32_ELEMENTS) {
        return GetTypedArrayAccessor<Float32Elements>();
      } else if (elementsKind == FLOAT64_ELEMENTS) {
        return GetTypedArrayAccessor<Float64Elements>();
      } else if (elementsKind == UINT8_CLAMPED_ELEMENTS) {
        return GetTypedArrayAccessor<Uint8ClampedElements>();
      } else if (elementsKind == BIGUINT64_ELEMENTS) {
        return GetTypedArrayAccessor<BigUint64Elements>();
      } else if (elementsKind == BIGINT64_ELEMENTS) {
        return GetTypedArrayAccessor<BigInt64Elements>();
      }
    } else {
      if (elementsKind == UINT8_ELEMENTS) {
        return GetTypedArrayAccessor<Uint8Elements>();
      } else if (elementsKind == INT8_ELEMENTS) {
        return GetTypedArrayAccessor<Int8Elements>();
      } else if (elementsKind == UINT16_ELEMENTS) {
        return GetTypedArrayAccessor<Uint16Elements>();
      } else if (elementsKind == INT16_ELEMENTS) {
        return GetTypedArrayAccessor<Int16Elements>();
      } else if (elementsKind == UINT32_ELEMENTS) {
        return GetTypedArrayAccessor<Uint32Elements>();
      }
    }
    unreachable;
  }

  extern macro TypedArrayBuiltinsAssembler::SetJSTypedArrayOnHeapDataPtr(
      JSTypedArray, ByteArray, uintptr): void;
  extern macro TypedArrayBuiltinsAssembler::SetJSTypedArrayOffHeapDataPtr(
      JSTypedArray, RawPtr, uintptr): void;

  // AttachedJSTypedArray guards that the array's buffer is not detached.
  transient type AttachedJSTypedArray extends JSTypedArray;

  macro EnsureAttached(array: JSTypedArray): AttachedJSTypedArray
      labels Detached {
    if (IsDetachedBuffer(array.buffer)) goto Detached;
    return %RawDownCast<AttachedJSTypedArray>(array);
  }

  struct AttachedJSTypedArrayWitness {
    Get(): AttachedJSTypedArray {
      return this.unstable;
    }

    GetStable(): JSTypedArray {
      return this.stable;
    }

    Recheck() labels Detached {
      if (IsDetachedBuffer(this.stable.buffer)) goto Detached;
      this.unstable = %RawDownCast<AttachedJSTypedArray>(this.stable);
    }

    Load(implicit context: Context)(k: uintptr): JSAny {
      const lf: LoadNumericFn = this.loadfn;
      return lf(context, this.unstable, k);
    }

    stable: JSTypedArray;
    unstable: AttachedJSTypedArray;
    loadfn: LoadNumericFn;
  }

  macro NewAttachedJSTypedArrayWitness(array: AttachedJSTypedArray):
      AttachedJSTypedArrayWitness {
    const kind = array.elements_kind;
    const accessor: TypedArrayAccessor = GetTypedArrayAccessor(kind);
    return AttachedJSTypedArrayWitness{
      stable: array,
      unstable: array,
      loadfn: accessor.loadNumericFn
    };
  }

  macro KindForArrayType<T : type extends ElementsKind>():
      constexpr ElementsKind;
  KindForArrayType<Uint8Elements>(): constexpr ElementsKind {
    return UINT8_ELEMENTS;
  }
  KindForArrayType<Int8Elements>(): constexpr ElementsKind {
    return INT8_ELEMENTS;
  }
  KindForArrayType<Uint16Elements>(): constexpr ElementsKind {
    return UINT16_ELEMENTS;
  }
  KindForArrayType<Int16Elements>(): constexpr ElementsKind {
    return INT16_ELEMENTS;
  }
  KindForArrayType<Uint32Elements>(): constexpr ElementsKind {
    return UINT32_ELEMENTS;
  }
  KindForArrayType<Int32Elements>(): constexpr ElementsKind {
    return INT32_ELEMENTS;
  }
  KindForArrayType<Float32Elements>(): constexpr ElementsKind {
    return FLOAT32_ELEMENTS;
  }
  KindForArrayType<Float64Elements>(): constexpr ElementsKind {
    return FLOAT64_ELEMENTS;
  }
  KindForArrayType<Uint8ClampedElements>(): constexpr ElementsKind {
    return UINT8_CLAMPED_ELEMENTS;
  }
  KindForArrayType<BigUint64Elements>(): constexpr ElementsKind {
    return BIGUINT64_ELEMENTS;
  }
  KindForArrayType<BigInt64Elements>(): constexpr ElementsKind {
    return BIGINT64_ELEMENTS;
  }

  builtin LoadTypedElement<T : type extends ElementsKind>(
      _context: Context, array: JSTypedArray, index: uintptr): Numeric {
    return LoadFixedTypedArrayElementAsTagged(
        array.data_ptr, index, KindForArrayType<T>());
  }

  builtin StoreTypedElementNumeric<T : type extends ElementsKind>(
      context: Context, typedArray: JSTypedArray, index: uintptr,
      value: Numeric): Smi {
    StoreJSTypedArrayElementFromNumeric(
        context, typedArray, index, value, KindForArrayType<T>());
    return kStoreSucceded;
  }

  // Returns True on sucess or False if the typedArrays was detached.
  builtin StoreTypedElementJSAny<T : type extends ElementsKind>(
      context: Context, typedArray: JSTypedArray, index: uintptr,
      value: JSAny): Smi {
    try {
      StoreJSTypedArrayElementFromTagged(
          context, typedArray, index, value, KindForArrayType<T>())
          otherwise IfDetached;
    }
    label IfDetached {
      return kStoreFailureArrayDetached;
    }
    return kStoreSucceded;
  }

  transitioning macro CallCompare(
      implicit context: Context, array: JSTypedArray,
      comparefn: Callable)(a: JSAny, b: JSAny): Number {
    // a. Let v be ? ToNumber(? Call(comparefn, undefined, x, y)).
    const v: Number =
        ToNumber_Inline(context, Call(context, comparefn, Undefined, a, b));

    // b. If IsDetachedBuffer(buffer) is true, throw a TypeError exception.
    if (IsDetachedBuffer(array.buffer)) {
      ThrowTypeError(kDetachedOperation, '%TypedArray%.prototype.sort');
    }

    // c. If v is NaN, return +0.
    if (NumberIsNaN(v)) return 0;

    // d. return v.
    return v;
  }

  // Merges two sorted runs [from, middle) and [middle, to)
  // from "source" into "target".
  transitioning macro
  TypedArrayMerge(
      implicit context: Context, array: JSTypedArray, comparefn: Callable)(
      source: FixedArray, from: uintptr, middle: uintptr, to: uintptr,
      target: FixedArray) {
    let left: uintptr = from;
    let right: uintptr = middle;

    for (let targetIndex: uintptr = from; targetIndex < to; ++targetIndex) {
      if (left < middle && right >= to) {
        // If the left run has elements, but the right does not, we take
        // from the left.
        target.objects[targetIndex] = source.objects[left++];
      } else if (left < middle) {
        // If both have elements, we need to compare.
        const leftElement = UnsafeCast<JSAny>(source.objects[left]);
        const rightElement = UnsafeCast<JSAny>(source.objects[right]);
        if (CallCompare(leftElement, rightElement) <= 0) {
          target.objects[targetIndex] = leftElement;
          left++;
        } else {
          target.objects[targetIndex] = rightElement;
          right++;
        }
      } else {
        // No elements on the left, but the right does, so we take
        // from the right.
        assert(left == middle);
        target.objects[targetIndex] = source.objects[right++];
      }
    }
  }

  transitioning builtin
  TypedArrayMergeSort(implicit context: Context)(
      source: FixedArray, from: uintptr, to: uintptr, target: FixedArray,
      array: JSTypedArray, comparefn: Callable): JSAny {
    assert(to - from > 1);
    const middle: uintptr = from + ((to - from) >>> 1);

    // On the next recursion step source becomes target and vice versa.
    // This saves the copy of the relevant range from the original
    // array into a work array on each recursion step.
    if (middle - from > 1) {
      TypedArrayMergeSort(target, from, middle, source, array, comparefn);
    }
    if (to - middle > 1) {
      TypedArrayMergeSort(target, middle, to, source, array, comparefn);
    }

    TypedArrayMerge(source, from, middle, to, target);

    return Undefined;
  }

  // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.sort
  transitioning javascript builtin TypedArrayPrototypeSort(
      js-implicit context: Context,
      receiver: JSAny)(...arguments): JSTypedArray {
    // 1. If comparefn is not undefined and IsCallable(comparefn) is false,
    //    throw a TypeError exception.
    const comparefnObj: JSAny = arguments.length > 0 ? arguments[0] : Undefined;
    if (comparefnObj != Undefined && !TaggedIsCallable(comparefnObj)) {
      ThrowTypeError(kBadSortComparisonFunction, comparefnObj);
    }

    // 2. Let obj be the this value.
    const obj: JSAny = receiver;

    // 3. Let buffer be ? ValidateTypedArray(obj).
    //    ValidateTypedArray currently returns the array, not the ViewBuffer.
    const array: JSTypedArray =
        ValidateTypedArray(context, obj, '%TypedArray%.prototype.sort');

    // Default sorting is done in C++ using std::sort
    if (comparefnObj == Undefined) {
      return TypedArraySortFast(context, obj);
    }

    // 4. Let len be obj.[[ArrayLength]].
    const len: uintptr = array.length;

    // Arrays of length 1 or less are considered sorted.
    if (len < 2) return array;

    const comparefn: Callable =
        Cast<Callable>(comparefnObj) otherwise unreachable;
    const accessor: TypedArrayAccessor =
        GetTypedArrayAccessor(array.elements_kind);

    // Prepare the two work arrays. All numbers are converted to tagged
    // objects first, and merge sorted between the two FixedArrays.
    // The result is then written back into the JSTypedArray.
    const work1: FixedArray = AllocateZeroedFixedArray(Convert<intptr>(len));
    const work2: FixedArray = AllocateZeroedFixedArray(Convert<intptr>(len));

    for (let i: uintptr = 0; i < len; ++i) {
      const element: Numeric = accessor.LoadNumeric(context, array, i);
      work1.objects[i] = element;
      work2.objects[i] = element;
    }

    TypedArrayMergeSort(work2, 0, len, work1, array, comparefn);

    // work1 contains the sorted numbers. Write them back.
    for (let i: uintptr = 0; i < len; ++i) {
      accessor.StoreNumeric(
          context, array, i, UnsafeCast<Numeric>(work1.objects[i]));
    }

    return array;
  }
}
